# Generated by Django 4.2.23 on 2025-06-30 19:26

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Arrondissement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "verbose_name": "Arrondissement",
                "verbose_name_plural": "Arrondissements",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Commune",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "arrondissement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="communes",
                        to="core.arrondissement",
                    ),
                ),
            ],
            options={
                "verbose_name": "Commune",
                "verbose_name_plural": "Communes",
                "ordering": ["name"],
                "unique_together": {("arrondissement", "name")},
            },
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name": "Département",
                "verbose_name_plural": "Départements",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DocumentationCenter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="Nom du Centre"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        verbose_name="E-mail du Centre (Officiel)",
                    ),
                ),
                (
                    "phone1",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Le numéro de téléphone doit être entré au format : '+999999999'. Jusqu'à 15 chiffres autorisés.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Téléphone 1",
                    ),
                ),
                (
                    "phone2",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Le numéro de téléphone doit être entré au format : '+999999999'. Jusqu'à 15 chiffres autorisés.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Téléphone 2",
                    ),
                ),
                ("full_address", models.TextField(verbose_name="Adresse Complète")),
                (
                    "responsible_full_name",
                    models.CharField(
                        max_length=255, verbose_name="Nom Complet du Responsable"
                    ),
                ),
                (
                    "responsible_phone1",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Le numéro de téléphone doit être entré au format : '+999999999'. Jusqu'à 15 chiffres autorisés.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Téléphone Responsable 1",
                    ),
                ),
                (
                    "responsible_phone2",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Le numéro de téléphone doit être entré au format : '+999999999'. Jusqu'à 15 chiffres autorisés.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Téléphone Responsable 2",
                    ),
                ),
                (
                    "responsible_address",
                    models.TextField(verbose_name="Adresse du Responsable"),
                ),
                (
                    "responsible_email",
                    models.EmailField(
                        max_length=254, verbose_name="E-mail Personnel du Responsable"
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de Création du Compte"
                    ),
                ),
                (
                    "trial_start_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        verbose_name="Date de Début d'Essai",
                    ),
                ),
                (
                    "trial_end_date",
                    models.DateField(verbose_name="Date de Fin d'Essai"),
                ),
                (
                    "is_blocked",
                    models.BooleanField(default=False, verbose_name="Compte Bloqué"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Compte Actif"),
                ),
                (
                    "monthly_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=10,
                        verbose_name="Montant Mensuel à Payer",
                    ),
                ),
                (
                    "quota_physical_books",
                    models.IntegerField(
                        default=-1,
                        verbose_name="Quota Livres Physiques (-1 pour illimité)",
                    ),
                ),
                (
                    "quota_ebooks",
                    models.IntegerField(
                        default=-1, verbose_name="Quota Ebooks (-1 pour illimité)"
                    ),
                ),
                (
                    "quota_trainings",
                    models.IntegerField(
                        default=-1, verbose_name="Quota Formations (-1 pour illimité)"
                    ),
                ),
                (
                    "quota_archives",
                    models.IntegerField(
                        default=-1, verbose_name="Quota Archives (-1 pour illimité)"
                    ),
                ),
                (
                    "arrondissement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.arrondissement",
                        verbose_name="Arrondissement",
                    ),
                ),
                (
                    "commune",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.commune",
                        verbose_name="Commune",
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.department",
                        verbose_name="Département",
                    ),
                ),
            ],
            options={
                "verbose_name": "Centre de Documentation",
                "verbose_name_plural": "Centres de Documentation",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="arrondissement",
            name="department",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="arrondissements",
                to="core.department",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="arrondissement",
            unique_together={("department", "name")},
        ),
    ]
